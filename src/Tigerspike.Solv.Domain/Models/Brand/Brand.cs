using System;
using System.Collections.Generic;
using System.Linq;
using Tigerspike.Solv.Core.Exceptions;
using Tigerspike.Solv.Domain.Enums;
using Tigerspike.Solv.Domain.Interfaces;
using Tigerspike.Solv.Domain.Models.Induction;

namespace Tigerspike.Solv.Domain.Models
{
	public class Brand : ICreatedDate, IModifiedDate
	{

		/// <summary>
		/// An id that is impossible to be generated by any algorithm so we guarantee no collision.
		/// </summary>
		private static Guid _practiceBrandId = new Guid("11111111-1111-1111-1111-111111111111");

		/// <summary>
		/// An id that is impossible to be generated by any algorithm so we guarantee no collision.
		/// </summary>
		private static Guid _demoBrandId = new Guid("22222222-2222-2222-2222-222222222222");

		/// <summary>
		/// An id that is impossible to be generated by any algorithm so we guarantee no collision.
		/// </summary>
		public static Guid PracticeBrandId => _practiceBrandId;

		/// <summary>
		/// An id that is impossible to be generated by any algorithm so we guarantee no collision.
		/// </summary>
		public static Guid DemoBrandId => _demoBrandId;

		/// <summary>
		/// The brand Identifier.
		/// </summary>
		public Guid Id { get; private set; }

		/// <summary>
		/// The name of the brand.
		/// </summary>
		public string Name { get; private set; }

		/// <summary>
		/// The code of the brand.
		/// </summary>
		public string Code { get; private set; }

		/// <summary>
		/// The short code of the brand.
		/// </summary>
		public string ShortCode { get; private set; }

		/// <summary>
		/// The thumbnail url.
		/// </summary>
		public string Thumbnail { get; private set; }

		/// <summary>
		/// The logo url.
		/// </summary>
		public string Logo { get; private set; }

		/// <summary>
		/// The url of the text of the contract of this brand (for normal solvers, not internal agents)
		/// </summary>
		public string ContractUrl { get; private set; }

		/// <summary>
		/// The url of the text of the contract of this brand (for internal agents)
		/// </summary>
		public string ContractInternalUrl { get; private set; }

		/// <summary>
		/// Is this brand for practising, normally it is only one brand called Solv.
		/// </summary>
		public bool IsPractice { get; private set; }

		/// <summary>
		/// Current fee percentage that Solv will add to ticket price
		/// </summary>
		public decimal FeePercentage { get; private set; } = 0.3m; // default fee percentage

		/// <summary>
		/// Current price for tickets ending up in the 'New' status
		/// </summary>
		public decimal TicketPrice { get; private set; } = 3.0m; // default ticket price

		/// <summary>
		/// Current billing details of the brand
		/// </summary>
		public Guid BillingDetailsId { get; private set; }

		/// <summary>
		/// The account id in the payment gateway service (PayPal currently)
		/// </summary>
		public string PaymentAccountId { get; private set; }

		/// <summary>
		/// The billing agreement token that is used to initiate the Client (Task Master) PayPal onboarding.
		/// This token will be returned when PayPal grant Solv the required permissions.
		/// </summary>
		public string BillingAgreementToken { get; private set; }

		/// <summary>
		/// The billing agreement id acquired by PayPal and authorized by the brand owner.
		/// </summary>
		public string BillingAgreementId { get; private set; }

		/// <summary>
		/// Vat rate for the invoices
		/// </summary>
		public decimal? VatRate { get; private set; }

		/// <summary>
		/// The message that is shown when the solver has done induction and signed the contract
		/// yet he is still needs to be authorized manually by the client.
		/// </summary>
		public string UnauthorizedMessage { get; private set; }

		/// <summary>
		/// If true, the solver will be authorized to a brand automatically after doing the inducation
		/// and signing the contract.
		/// </summary>
		public bool AutomaticAuthorization { get; private set; }

		/// <summary>
		/// The title that is shown when the solver opens agreement modal.
		/// </summary>
		public string AgreementHeading { get; private set; }

		/// <summary>
		/// The content that is shown when the solver opens agreement modal.
		/// </summary>
		public string AgreementContent { get; private set; }

		/// <summary>
		/// If true, the solver must accept agreement before proceesing with getting authorized for
		/// a brand
		/// </summary>
		public bool IsAgreementRequired { get; private set; }

		/// <summary>
		/// Quiz that user has to take to pass authorization
		/// </summary>
		public Guid? QuizId { get; private set; }

		/// <summary>
		/// Probing form id
		/// </summary>
		public Guid? ProbingFormId { get; private set; }

		/// <summary>
		/// Probing form for customer
		/// </summary>
		public ProbingForm ProbingForm { get; private set; }

		/// <summary>
		/// The instructions to be shown when the solver has done the induction
		/// </summary>
		public string InductionDoneMessage { get; private set; }

		/// <summary>
		/// HTML content of the instructions
		/// </summary>
		public string InductionInstructions { get; set; }

		/// <summary>
		/// The id of the payment route of the brand.
		/// </summary>
		public int? PaymentRouteId { get; set; }

		/// <summary>
		/// Determines whether invoicing is enabled for the brand.
		/// </summary>
		public bool InvoicingEnabled { get; set; }

		/// <summary>
		/// Determines whether invoicing dashboard is enabled for the brand.
		/// If disabled, all widgets that shows prices, due amount, invoices .. are disabled on FE.
		/// </summary>
		public bool InvoicingDashboardEnabled { get; set; }

		/// <summary>
		/// The payment route for the brand.
		/// </summary>
		public PaymentRoute PaymentRoute { get; set; }

		/// <summary>
		/// The Create Ticket header for the brand create ticket form.
		/// </summary>
		public string CreateTicketHeader { get; set; }

		/// <summary>
		/// The Create Ticket Sub header for the brand create ticket form.
		/// </summary>
		public string CreateTicketSubheader { get; set; }

		/// <summary>
		/// The Create Ticket Instructions for the brand.
		/// </summary>
		public string CreateTicketInstructions { get; set; }

		/// <summary>
		/// The Advocate Title for the brand.
		/// </summary>
		public string AdvocateTitle { get; set; }

		/// <summary>
		/// Determines if the tags are enabled for the brand.
		/// </summary>
		public bool TagsEnabled { get; private set; }

		/// <summary>
		/// Determines if the SPOS flow is enabled for the brand.
		/// </summary>
		public bool SposEnabled { get; private set; }

		/// <summary>
		/// Determines if NPS is enabled for the brand.
		/// </summary>
		public bool NpsEnabled { get; private set; }

		/// <summary>
		/// Determines if Tickets export is enabled for the brand.
		/// </summary>
		public bool TicketsExportEnabled { get; private set; }

		/// <summary>
		/// Determines if super solvers flow is enabled for the brand.
		/// </summary>
		public bool SuperSolversEnabled { get; private set; }

		/// <summary>
		/// Determines if "push back to client CRM" flow is enabled for the brand.
		/// </summary>
		public bool PushBackToClientEnabled { get; private set; }

		/// <summary>
		/// Determines the wait in minutes before closing the tickets.
		/// </summary>
		public int WaitMinutesToClose { get; private set; }

		/// <summary>
		/// The color of the brand.
		/// </summary>
		public string Color { get; private set; }

		/// <inheritdoc/>
		public DateTime CreatedDate { get; set; }

		/// <inheritdoc/>
		public DateTime ModifiedDate { get; set; }

		/// <summary>
		/// The color of the brand.
		/// </summary>
		public string SposEmail { get; private set; }

		/// <summary>
		/// Default culture for the brand tickets
		/// </summary>
		public string DefaultCulture { get; }

		/// <summary>
		/// Enable Customer API calling
		/// </summary>
		public bool EnableCustomerEndpoint { get; }

		/// <summary>
		/// Determines if customer send to create ticket form.
		/// </summary>
		public bool SkipCustomerForm { get; private set; }

		/// <summary>
		/// The list of all advocates that are associated with the brand.
		/// </summary>
		public ICollection<AdvocateBrand> Advocates { get; private set; }

		/// <summary>
		/// Gets the list of induction sections.
		/// </summary>
		public ICollection<Section> InductionSections { get; private set; }

		/// <summary>
		/// The list of all advocates 'applications' that are associated with the brand.
		/// </summary>
		public List<AdvocateApplicationBrand> AdvocateApplications { get; private set; }

		public ICollection<TicketEscalationConfig> TicketEscalationConfigs { get; private set; }

		public ICollection<AbandonReason> AbandonReasons { get; private set; }

		public ICollection<Tag> Tags { get; private set; }

		public ICollection<BrandFormField> FormFields { get; }

		/// <summary>
		/// Notification configs for events
		/// </summary>
		public ICollection<BrandNotificationConfig> NotificationConfig { get; }

		/// <summary>
		/// Metadata access configs for brand
		/// </summary>
		public ICollection<BrandMetadataAccess> MetadataAccess { get; }

		/// <summary>
		/// Metadata routing configs for brand
		/// </summary>
		public BrandMetadataRoutingConfig RoutingConfig { get; }

		/// <summary>
		/// Determines if Tickets import is enabled for the brand.
		/// </summary>
		public bool TicketsImportEnabled { get; private set; }

		/// <summary>
		/// Determines if sub tags enabled for a brand.
		/// </summary>
		public bool SubTagEnabled { get; set; }

		/// <summary>
		/// Determines if multiselection of tags/sub tags enabled.
		/// </summary>
		public bool MultiTagEnabled { get; set; }

		/// <summary>
		/// Gets or list of categories
		/// </summary>
		public List<Category> Categories { get; private set; }

		/// <summary>
		/// Determines if category is enabled.
		/// </summary>
		public bool CategoryEnabled { get; private set; }

		/// <summary>
		/// Determines if valid transfer feature is enabled.
		/// </summary>
		public bool ValidTransferEnabled { get; private set; }

		/// <summary>
		/// Description for Category
		/// </summary>
		public string CategoryDescription { get; private set; }

		/// <summary>
		/// Description for ValidTransfer
		/// </summary>
		public string ValidTransferDescription { get; private set; }

		/// <summary>
		/// Description for Diagnosis
		/// </summary>
		public string DiagnosisDescription { get; private set; }

		/// <summary>
		/// Description for SPOS
		/// </summary>
		public string SposDescription { get; private set; }

		/// <summary>
		/// Determines if additional feedback is enabled for the brand.
		/// </summary>
		public bool AdditionalFeedBackEnabled { get; private set; }

		/// <summary>
		/// Determines if end chat is enabled for the brand.
		/// </summary>
		public bool EndChatEnabled { get; private set; }

		/// <summary>
		/// The auto redirect url for the brand
		/// </summary>
		public string AutoRedirectUrl { get; private set; }

		/// <summary>
		/// The redirect url for the brand from Probing Form
		/// </summary>
		public string ProbingFormRedirectUrl { get; private set; }

		protected Brand()
		{
			AdvocateApplications = new List<AdvocateApplicationBrand>();
			FormFields = new List<BrandFormField>();
		}

		public Brand(Guid id, string name, string thumbnail, string logo, string contractUrl, string contractInternalUrl, bool isPractice, Guid billingDetailsId, string paymentAccountId, string billingAgreementToken, string billingAgreementId, decimal? vatRate, string unauthorizedMessage, bool automaticAuthorization, string agreementHeading, string agreementContent, bool isAgreementRequired, Guid? quizId, string inductionDoneMessage, string inductionInstructions, int? paymentRouteId, bool invoicingEnabled, bool invoicingDashboardEnabled, PaymentRoute paymentRoute, string ticketSubheader, string ticketInstructions, string advocateTitle, DateTime createdDate, DateTime modifiedDate, ICollection<AdvocateBrand> advocates, ICollection<Section> inductionSections, List<AdvocateApplicationBrand> advocateApplications, ICollection<TicketEscalationConfig> ticketEscalationConfigs, ICollection<AbandonReason> abandonReasons, ICollection<Tag> tags, bool tagsEnabled, bool npsEnabled, bool sposEnabled, string sposEmail, ICollection<BrandFormField> formFields)
		{
			Id = id;
			Name = name;
			Thumbnail = thumbnail;
			Logo = logo;
			ContractUrl = contractUrl;
			ContractInternalUrl = contractInternalUrl;
			IsPractice = isPractice;
			BillingDetailsId = billingDetailsId;
			PaymentAccountId = paymentAccountId;
			BillingAgreementToken = billingAgreementToken;
			BillingAgreementId = billingAgreementId;
			VatRate = vatRate;
			UnauthorizedMessage = unauthorizedMessage;
			AutomaticAuthorization = automaticAuthorization;
			AgreementHeading = agreementHeading;
			AgreementContent = agreementContent;
			IsAgreementRequired = isAgreementRequired;
			QuizId = quizId;
			InductionDoneMessage = inductionDoneMessage;
			InductionInstructions = inductionInstructions;
			PaymentRouteId = paymentRouteId;
			InvoicingEnabled = invoicingEnabled;
			InvoicingDashboardEnabled = invoicingDashboardEnabled;
			PaymentRoute = paymentRoute;
			CreateTicketSubheader = ticketSubheader;
			CreateTicketInstructions = ticketInstructions;
			AdvocateTitle = advocateTitle;
			CreatedDate = createdDate;
			ModifiedDate = modifiedDate;
			Advocates = advocates;
			InductionSections = inductionSections;
			AdvocateApplications = advocateApplications;
			TicketEscalationConfigs = ticketEscalationConfigs;
			AbandonReasons = abandonReasons;
			Tags = tags;
			TagsEnabled = tagsEnabled;
			NpsEnabled = npsEnabled;
			SposEnabled = sposEnabled;
			FormFields = formFields;
			SposEmail = sposEmail;
		}

		/// <summary>
		/// Create an instance that would be used as a practice brand.
		/// </summary>
		/// <param name="name">The name of the brand</param>
		/// <param name="logo">The logo url of the brand</param>
		/// <param name="thumbnail">The thumbnail url of the brand</param>
		/// <returns>An instance of the practice brand</returns>
		public static Brand CreatePracticeBrand(string name, string logo, string thumbnail) =>
			new Brand() { Id = PracticeBrandId, Name = name, Logo = logo, Thumbnail = thumbnail, IsPractice = true, Color = "#FBB218" };

		/// <summary>
		/// Create an instance that would be used as a demo brand.
		/// </summary>
		/// <param name="name">The name of the brand</param>
		/// <param name="logo">The logo url of the brand</param>
		/// <param name="thumbnail">The thumbnail url of the brand</param>
		/// <returns>An instance of the demo brand</returns>
		public static Brand CreateDemoBrand(string name, string logo, string thumbnail) =>
			new Brand()
			{
				Id = DemoBrandId,
				Name = name,
				Logo = logo,
				Thumbnail = thumbnail,
				IsPractice = false,
				TicketsExportEnabled = true,
				SuperSolversEnabled = true,
				Color = "#FBB218",
				ContractUrl = "https://assets.solvnow.com/solv-support/contract.txt",
				ContractInternalUrl = "https://assets.solvnow.com/solv-support/contract.txt",
				AutomaticAuthorization = true,
			};

		public void SetForcedEscalationReason(string name)
		{
			AbandonReasons ??= new List<AbandonReason>();
			AbandonReasons.Add(new AbandonReason(Id, name, true, isForcedEscalation: true));
		}

		public void SetContract(string contractUrl) => ContractUrl = contractUrl;

		public void SetBlockedAdvocateReason(string name)
		{
			AbandonReasons ??= new List<AbandonReason>();
			AbandonReasons.Add(new AbandonReason(Id, name, true, isBlockedAdvocate: true));
		}

		public void SetAutoAbandonedReason(string name)
		{
			AbandonReasons ??= new List<AbandonReason>();
			AbandonReasons.Add(new AbandonReason(Id, name, true, isAutoAbandoned: true));
		}

		public void AddAbandonReason(string name, TicketFlowAction? action = null) => AbandonReasons.Add(new AbandonReason(Id, name, true, action: action));

		public void AddTags(string name, TicketFlowAction? action = null)
		{
			var tag = new Tag(Id, name, action);
			if (tag.IsValid())
			{
				Tags.Add(tag);
			}
			else
			{
				throw new DomainException($"Tag [{name}] does not meet tag naming criteria");
			}
		}

		public void DeleteInductionSection(Section section) => InductionSections = InductionSections.Except(new[] { section }).ToList();

		public void SetTicketPrice(decimal ticketPrice) => TicketPrice = ticketPrice;

		/// <summary>
		/// Set the payment account using the account id and billing agreement id.
		/// Those are the two values required by PayPal to make a payment on Client behalf.
		/// </summary>
		public void SetPaymentAccount(string accountId, string billingAgreementId)
		{
			PaymentAccountId = accountId;
			BillingAgreementId = billingAgreementId;
		}

		/// <summary>
		/// Set the billing agreement token for later verification.
		/// </summary>
		public void SetBillingAgreementToken(string token) => BillingAgreementToken = token;

		/// <summary>
		/// Set the brand color for later verification.
		/// </summary>
		public void SetColor(string color) => Color = color;

		/// <summary>
		/// Assign the advocate applications to this brand.
		/// </summary>
		public void AssignAdvocateApplications(List<AdvocateApplicationBrand> advocateAppBrands) => AdvocateApplications.AddRange(advocateAppBrands);


		/// <summary>
		/// Assign the Quiz ID to brand.
		/// </summary>
		public void AssignQuizId(Guid quizId) => QuizId = quizId;

		/// <summary>
		/// Assign the Billing Details Id to brand.
		/// </summary>
		public void AssignBillingDetailsId(Guid billingDetailsId) => BillingDetailsId = billingDetailsId;

		/// <summary>
		/// Add categories for a brand.
		/// </summary>
		/// <param name="categories">Categories to be added.</param>
		public void AddCategories(List<(string name, bool enabled, int order)> categories) => Categories.AddRange(categories.Select(c => new Category(Id, c.name, c.enabled, c.order)).ToList());
	}
}